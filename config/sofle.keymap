#include <behaviors.dtsi>
#include "keypositions_60keys.dtsi"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 LH0 LH1 LH2 LH3 LH4
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 RH0 RH1 RH2 RH3 RH4
#define KEYS_T LH0 LH1 LH2 LH3 LH4 RH0 RH1 RH2 RH3 RH4

/*
Left hand
LN0 to LN5: 0 to 5
LT0 to LT5: 12 to 17
LM0 to LM5: 24 to 29
LB0 to LB5: 36 to 41
LH0 to LH4: 50 to 54

Right hand
RN0 to RN5: 6 to 11
RT0 to RT5: 18 to 23
RM0 to RM5: 30 to 35
RB0 to RB5: 43 to 48
RH0 to RH4: 55 to 59
*/

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

// Set nice!view CS pin to use D2 pin on nice!nano V2

&nice_view_spi {
    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

/ {
    behaviors {
        /* left-hand HRMs */

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            label = "HOMEROW_MODS_LEFT";
            tapping-term-ms = <280>;
            #binding-cells = <2>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            label = "HOMEROW_MODS_RIGHT";
            tapping-term-ms = <280>;
            #binding-cells = <2>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // delay positional check until key-release
        };
        c_copy: copy_on_double_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_ON_DOUBLE_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp C>, <&kp LG(C)>;
        };
        v_paste: paste_on_double_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE_ON_DOUBLE_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp V>, <&kp LG(V)>;
        };
        x_cut: cut_on_double_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "CUT_ON_DOUBLE_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp X>, <&kp LG(X)>;
        };
    };

    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE      &kp N1                &kp N2            &kp N3          &kp N4           &kp N5                                      &kp N6       &kp N7          &kp N8          &kp N9             &kp N0                     &kp LG(LS(N4))
&kp TAB         &kp Q                 &kp W             &kp E           &kp R            &kp T                                       &kp Y        &kp U           &kp I           &kp O              &kp P                      &kp LA(A)
&mo 1           &hm_l LEFT_CONTROL A  &hm_l LEFT_ALT S  &hm_l LCMD D    &hm_l LSHFT F    &kp G                                       &kp H        &hm_r RSHIFT J  &hm_r RCMD K    &hm_r RIGHT_ALT L  &hm_r RIGHT_CONTROL LA(O)  &kp LA(SINGLE_QUOTE)
&kp LEFT_SHIFT  &kp Z                 &x_cut            &c_copy         &v_paste         &kp B        &kp C_MUTE       &kp CAPSLOCK  &kp N        &kp M           &kp COMMA       &kp DOT            &kp FSLH                   &kp RSHFT
                                      &kp LEFT_COMMAND  &kp LEFT_ARROW  &kp RIGHT_ARROW  &lt 2 SPACE  &kp BACKSPACE    &mo 1         &lt 2 ENTER  &kp UP_ARROW    &kp DOWN_ARROW  &kp RGUI
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        lower_layer {
            label = "lower";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &kp F1         &kp F2             &kp F3                  &kp F4                   &kp F5                               &kp F6       &kp F7            &kp F8              &kp F9     &kp F10           &kp F11
&trans  &kp GRAVE      &kp DOUBLE_QUOTES  &kp LEFT_BRACE          &kp RIGHT_BRACE          &kp AMPERSAND                        &kp TILDE    &kp BACKSLASH     &kp PIPE            &kp SLASH  &kp SINGLE_QUOTE  &kp F12
&trans  &kp LESS_THAN  &kp GREATER_THAN   &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS    &kp EQUAL                            &kp CARET    &kp AMPS          &kp KP_MULTIPLY     &kp LPAR   &kp MINUS         &kp PIPE
&trans  &kp EQUAL      &kp LA(E)          &kp LEFT_BRACKET        &kp RIGHT_BRACKET        &kp DOLLAR     &trans        &trans  &kp PERCENT  &kp RBKT          &kp SEMI            &kp COLON  &kp UNDERSCORE    &trans
                       &kp PERCENT        &kp LS(LA(LEFT_ARROW))  &kp LS(LA(RIGHT_ARROW))  &trans         &kt DELETE    &trans  &trans       &kp LG(UP_ARROW)  &kp LG(DOWN_ARROW)  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
            label = "raise";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans        &trans           &trans           &trans           &trans     &trans
&trans      &kp INS       &kp PSCRN     &kp K_CMENU   &bt BT_PRV    &bt BT_NXT                      &kp ASTERISK  &kt KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp N0     &trans
&trans      &kp LALT      &kp LCTRL     &kp LSHFT     &trans        &kp CLCK                        &kp PLUS      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp DEL    &kp BSPC
&trans      &kp K_UNDO    &kp K_CUT     &kp K_COPY    &kp K_PASTE   &trans        &trans    &trans  &kp MINUS     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp SLASH  &trans
                          &trans        &trans        &trans        &trans        &trans    &trans  &trans        &trans           &kp KP_NUMBER_0  &kp PERIOD
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
